//@version=5
strategy("DCA Basique PnL", overlay=true, pyramiding=10000, calc_on_every_tick=true, process_orders_on_close=true)

// ---------- Inputs ----------
DAILY   = "DAILY"
WEEKLY  = "WEEKLY"
MONTHLY = "MONTHLY"

month_day  = input.int(15, minval=1, maxval=28, title="Jour du mois (pour DCA mensuel)")
week_day   = input.int(dayofweek.monday, title="Jour de la semaine (pour DCA hebdo)", options=[dayofweek.monday, dayofweek.tuesday, dayofweek.wednesday, dayofweek.thursday, dayofweek.friday, dayofweek.saturday, dayofweek.sunday])
dca_period = input.string(MONTHLY, title="Périodicité DCA", options=[DAILY, WEEKLY, MONTHLY])
dca_size   = input.float(100.0, title="Montant par achat (en devise de cotation)")
dca_long   = input.bool(true, title="Acheter (Long) ou Vendre (Short)")

start_year  = input.int(2018, title="Année de début")
start_month = input.int(1, title="Mois de début", minval=1, maxval=12)
start_day   = input.int(1, title="Jour de début", minval=1, maxval=31)
end_year    = input.int(2100, title="Année de fin")
end_month   = input.int(1, title="Mois de fin", minval=1, maxval=12)
end_day     = input.int(1, title="Jour de fin", minval=1, maxval=31)

start = timestamp(start_year, start_month, start_day, 0, 0)
end   = timestamp(end_year, end_month, end_day, 23, 59)

// ---------- Time / trigger ----------
new_day   = ta.change(dayofweek) != 0                        // BOOL : vrai au premier tick du nouveau jour
is_today  = year(timenow) == year(time) and month(timenow) == month(time) and dayofmonth(timenow) == dayofmonth(time)
is_buy_day = (dca_period == WEEKLY  and dayofweek == week_day) or
             (dca_period == MONTHLY and month_day == dayofmonth) or
             (dca_period == DAILY)

trigger   = time >= start and time <= end and is_buy_day and new_day
close_all = time > end or is_today

// ---------- Investissement & PnL ----------
var float total_invested = 0.0

if trigger
    // qty en unités (contrats / lots) = montant en quote / prix
    qty = dca_size / close
    strategy.entry("DCA", direction = dca_long ? strategy.long : strategy.short, qty = qty)
    total_invested += dca_size

position_value = strategy.position_size * close
profit_value   = position_value - total_invested
profit_pct     = total_invested > 0 ? (profit_value / total_invested) * 100 : na

// ---------- Sortie ----------
if close_all
    strategy.close("DCA")

// ---------- Affichage ----------
plot(strategy.position_avg_price, title="Prix moyen d'entrée", color=color.orange)

// bgcolor : utiliser color.new pour gérer la transparence
bgcol = dca_long ? (close < strategy.position_avg_price ? color.new(color.red, 85) : color.new(color.green, 85))
                 : (close < strategy.position_avg_price ? color.new(color.green, 85) : color.new(color.red, 85))
bgcolor(bgcol)

// Label unique mis à jour (évite de créer des centaines de labels)
var label pnlLabel = na
infoText = "Investi : " + str.tostring(total_invested, "#.##") + "\nValeur : " + str.tostring(position_value, "#.##") + "\nProfit : " + str.tostring(profit_value, "#.##") + (total_invested > 0 ? " (" + str.tostring(profit_pct, "#.##") + "%)" : "")

if not close_all
    if na(pnlLabel)
        pnlLabel := label.new(bar_index, high, infoText, xloc = xloc.bar_index, yloc = yloc.abovebar, style = label.style_label_down, color = color.white, textcolor = color.black, size = size.small)
    else
        label.set_xy(pnlLabel, bar_index, high)
        label.set_text(pnlLabel, infoText)
else
    // si on ferme la période, on supprime le label pour éviter affichage rémanent
    if not na(pnlLabel)
        label.delete(pnlLabel)
        pnlLabel := na

// (optionnel) trace du profit net dans le panneau overlay (tu peux le désactiver si tu veux)
plot(profit_value, title="Profit net", linewidth=2, display=display.none)
